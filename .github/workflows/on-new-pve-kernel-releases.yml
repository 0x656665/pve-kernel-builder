name: Check version on new pve-kernel releases

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to check for'
        type: string
        required: true

  workflow_call:
    inputs:
      branch:
        description: 'Branch to check for'
        type: string
        required: true
    secrets:
      token:
        description: 'Token used in privileged operations'
        required: false

env:
  DEBIAN_FRONTEND: noninteractive
  TOKEN: ${{ secrets.token }}

jobs:
  check-for-new-kernel:
    name: Check for new release
    runs-on: ubuntu-latest
    #if: github.event.repository.owner.id == github.event.sender.id
    outputs:
      new-kernel-available: ${{ steps.check-version.outputs.status == 'needs-update' }}
      kernel-version: ${{ steps.check-version.outputs.kernel-version }}
      proxmox-version: ${{ steps.check-version.outputs.proxmox-version }}
    permissions:
      contents: write

    steps:
    - name: Set Git token (if needed)
      if: env.TOKEN == ''
      env:
        TOK: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "TOKEN=${TOK}" > $GITHUB_ENV

    - name: Checkout Sources
      uses: actions/checkout@main
      with:
        token: ${{ env.TOKEN }}

    - name: Initialization environment
      run: |
        sudo -E apt-get update
        sudo -E apt install -y curl

    - name: Check for updates
      id: check-version
      run: |
        config_path='${{ github.workspace }}/config/${{ inputs.branch }}/version'
        cur_abi_ver=""
        if [[ -e ${config_path} ]]; then
            cur_abi_ver=`yq .version.kernel ${config_path}`
        fi
        echo "Current cached kernel version for branch ${{ inputs.branch }}: ${cur_abi_ver}"
        proxmox_ver=`curl -s "https://git.proxmox.com/?p=pve-kernel-meta.git;a=shortlog;h=refs/heads/${{ inputs.branch }}" | \
            grep -oP "bump version to \K[^<]*" | head -n 1`
        url="https://git.proxmox.com/?p=pve-kernel.git;a=shortlog;h=refs/heads/${{ inputs.branch }}"
        payload=`wget $url -qO shortlog.html`
        ver=`grep -oP "bump version to \K[^<,]+" shortlog.html | head -n 1`
        abi_ver=`grep -oP "update ABI file for \K[^<,]+" shortlog.html | head -n 1`
        #kernel_ver="pve-kernel-${abi_ver}-${ver}"
        if [[ ${abi_ver} == ${cur_abi_ver} ]]; then
            echo "Kernel ABI version ${abi_ver} for branch ${{ inputs.branch }} is up to date. Nothing to do."
            echo "status=up-to-date" >> $GITHUB_OUTPUT
        else
            echo "New kernel ABI version avaiable for branch ${{ inputs.branch }}: ${abi_ver}. Will update repository."
            mkdir -p `dirname ${config_path}`
            sudo echo -e "version:\n  proxmox: ${proxmox_ver}\n  kernel: ${abi_ver}" > ${config_path}
            echo "kernel-version=${abi_ver}" >> $GITHUB_OUTPUT
            echo "proxmox-version=${proxmox_ver}" >> $GITHUB_OUTPUT
            echo "status=needs-update" >> $GITHUB_OUTPUT
        fi
        rm -f shortlog.html

    - name: Commit and Push changes
      continue-on-error: true
      if: steps.check-version.outputs.status == 'needs-update'
      run: |
        git config --local user.email "github-actions@github.com"
        git config --local user.name "Github Actions"
        git pull
        git add config/**
        git commit -m 'Update version for branch ${{ inputs.branch }} to ${{ steps.check-version.outputs.kernel-version }}'
        git push

  build-kernel:
    name: Call build kernel workflow
    needs: check-for-new-kernel
    if: needs.check-for-new-kernel.outputs.new-kernel-available == 'true'
    uses: ./.github/workflows/build-pve-kernel-container.yml
    with:
      branch: ${{ inputs.branch }}

  release-new-kernel:
    name: Release new PVE kernels
    needs: [check-for-new-kernel, build-kernel]
    if: needs.build-kernel.outputs.build-successful == 'true'
    uses: ./.github/workflows/release.yml
    with:
      token: ${{ env.TOKEN }}
      artifact-name: ${{ needs.build-kernel.outputs.artifacts-name }}
      kernel-version: ${{ needs.check-for-new-kernel.outputs.kernel-version }}
      proxmox-version: ${{ needs.check-for-new-kernel.outputs.proxmox-version }}
