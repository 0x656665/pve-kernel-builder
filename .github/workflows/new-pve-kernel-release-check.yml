name: Check for new PVE kernel release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to check for'
        type: string
        required: true
      save-new-version:
        description: 'Save new detected version'
        type: boolean
        default: true

  workflow_call:
    inputs:
      branch:
        description: 'Branch to check for'
        type: string
        required: true
      save-new-version:
        description: 'Save new detected version'
        type: boolean
        default: true
    secrets:
      token:
        description: 'Token used in privileged operations'
        required: false

env:
  DEBIAN_FRONTEND: noninteractive
  TOKEN: ${{ secrets.token }}
  VERSION_AVAILABLE_FILE_PATH: '${{ github.workspace }}/config/${{ inputs.branch }}/version_available'
  VERSION_BUILT_FILE_PATH: '${{ github.workspace }}/config/${{ inputs.branch }}/version_built'

jobs:
  check-for-new-kernel:
    name: Check for new kernel release
    runs-on: ubuntu-latest
    #if: github.event.repository.owner.id == github.event.sender.id
    outputs:
      new-kernel-available: ${{ steps.check-version.outputs.status != 'up-to-date' }}
      kernel-version: ${{ steps.check-version.outputs.kernel-version }}
      proxmox-version: ${{ steps.check-version.outputs.proxmox-version }}

    steps:
    - name: Set Git token (if needed)
      if: env.TOKEN == ''
      env:
        TOK: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "TOKEN=${TOK}" > $GITHUB_ENV

    - name: Checkout Sources
      uses: actions/checkout@main
      with:
        token: ${{ env.TOKEN }}

    - name: Initialize environment
      run: |
        sudo -E apt-get update
        sudo -E apt install -y curl

    - name: Check for latest kernel version
      id: check-version
      run: |
        cur_abi_ver=""
        if [[ -e ${VERSION_AVAILABLE_FILE_PATH} ]]; then
            cur_abi_ver=`yq .version.kernel ${VERSION_AVAILABLE_FILE_PATH}`
        fi
        echo "Cached kernel ABI version for branch ${{ inputs.branch }}: ${cur_abi_ver}"
        proxmox_ver=`curl -s "https://git.proxmox.com/?p=pve-kernel-meta.git;a=shortlog;h=refs/heads/${{ inputs.branch }}" | \
            grep -oP "bump version to \K[^<]*" | head -n 1`
        url="https://git.proxmox.com/?p=pve-kernel.git;a=shortlog;h=refs/heads/${{ inputs.branch }}"
        payload=`wget $url -qO shortlog.html`
        ver=`grep -oP "bump version to \K[^<,]+" shortlog.html | head -n 1`
        abi_ver=`grep -oP "update ABI file for \K[^<,]+" shortlog.html | head -n 1`
        #kernel_ver="pve-kernel-${abi_ver}-${ver}"
        if [[ ${abi_ver} == ${cur_abi_ver} ]]; then
            echo "Current kernel ABI version ${abi_ver} for branch ${{ inputs.branch }} is up to date. Checking latest built kernel..."
            built_abi_ver=""
            if [[ -e ${VERSION_BUILT_FILE_PATH} ]]; then
                built_abi_ver=`yq .version.kernel ${VERSION_BUILT_FILE_PATH}`
            fi
            echo "Last built kernel version for branch ${{ inputs.branch }}: ${built_abi_ver}"
            if [[ ${abi_ver} == ${built_abi_ver} ]]; then
                echo "Built kernel ABI version ${abi_ver} for branch ${{ inputs.branch }} is up to date. Nothing to do."
                echo "status=up-to-date" >> $GITHUB_OUTPUT
            else
                echo "Built kernel ABI version and available kernel ABI version are out of sync. Will trigger a build..."
                echo "kernel-version=${abi_ver}" >> $GITHUB_OUTPUT
                echo "proxmox-version=${proxmox_ver}" >> $GITHUB_OUTPUT
                echo "status=needs-build" >> $GITHUB_OUTPUT
            fi
        else
            echo "New kernel ABI version avaiable for branch ${{ inputs.branch }}: ${abi_ver}. Will trigger a build."
            mkdir -p `dirname ${VERSION_AVAILABLE_FILE_PATH}`
            sudo echo -e "version:\n  proxmox: ${proxmox_ver}\n  kernel: ${abi_ver}" > ${VERSION_AVAILABLE_FILE_PATH}
            echo "kernel-version=${abi_ver}" >> $GITHUB_OUTPUT
            echo "proxmox-version=${proxmox_ver}" >> $GITHUB_OUTPUT
            echo "status=save-kernel-version-and-build" >> $GITHUB_OUTPUT
        fi
        rm -f shortlog.html

    - name: Debug - print internal state
      run: |
        echo "inputs.save-new-version: ${{ inputs.save-new-version }}"
        echo "steps.check-version.outputs.status: ${{ steps.check-version.outputs.status }}"
        
    - name: Save new available kernel version
      continue-on-error: true
      if: inputs.save-new-version == 'true' && steps.check-version.outputs.status == 'save-kernel-version-and-build'
      run: |
        git config --local user.email "github-actions@github.com"
        git config --local user.name "Github Actions"
        git pull
        git add config/**
        git commit -m 'Update available kernel version for branch ${{ inputs.branch }} to ${{ steps.check-version.outputs.kernel-version }}'
        git push

  build-kernel:
    name: Build new kernel
    needs: check-for-new-kernel
    if: needs.check-for-new-kernel.outputs.new-kernel-available == 'true'
    uses: ./.github/workflows/build-pve-kernel.yml
    with:
      branch: ${{ inputs.branch }}

  save-built-kernel-version:
    name: Save new kernel version
    runs-on: ubuntu-latest
    needs: [check-for-new-kernel, build-kernel]
    if: inputs.save-new-version == 'true' && needs.build-kernel.outputs.build-successful == 'true'
    permissions:
      contents: write
    steps:
    - name: Set Git token (if needed)
      if: env.TOKEN == ''
      env:
        TOK: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "TOKEN=${TOK}" > $GITHUB_ENV

    - name: Checkout Sources
      uses: actions/checkout@main
      with:
        token: ${{ env.TOKEN }}

    - name: Save new built kernel version
      run: |
        version_built_file_path='${{ github.workspace }}/config/${{ inputs.branch }}/version_built'
        sudo echo -e "version:" > ${version_built_file_path}
        sudo echo -e "  proxmox: ${{ needs.check-for-new-kernel.outputs.proxmox-version }}" >> ${version_built_file_path}
        sudo echo -e "  kernel: ${{ needs.check-for-new-kernel.outputs.kernel-version }}" >> ${version_built_file_path}
        git config --local user.email "github-actions@github.com"
        git config --local user.name "Github Actions"
        git pull
        git add config/**
        git commit -m 'Update built kernel version for branch ${{ inputs.branch }} to ${{ needs.check-for-new-kernel.outputs.kernel-version }}'
        git push

  release-new-kernel:
    name: Release new kernel
    needs: [check-for-new-kernel, build-kernel]
    if: needs.build-kernel.outputs.build-successful == 'true'
    secrets: inherit
    uses: ./.github/workflows/release-kernel.yml
    with:
      artifact-name: ${{ needs.build-kernel.outputs.artifacts-name }}
      kernel-version: ${{ needs.check-for-new-kernel.outputs.kernel-version }}
      proxmox-version: ${{ needs.check-for-new-kernel.outputs.proxmox-version }}
